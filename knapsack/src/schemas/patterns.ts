import gql from 'graphql-tag';
import { KnapsackAssetSet } from './asset-sets';
import { JsonSchemaObject } from './misc';

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file: src/schemas/pattern.schema.js,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Identifying machine friendly name of pattern. Usually the 'Block' in 'BEM'.
 */
type Id = string;
/**
 * Path (prefixed with namespace) of pattern template. Example '@components/_media-block.twig'.
 */
type CSSSelector = string;
/**
 * Denote if this form should be displayed inline
 */
type IsInline = boolean;
/**
 * Collections of template files and their schemas
 */
type PatternTemplatesSchema = {
  path: string;
  id: string;
  title: string;
  alias: string;
  selector?: CSSSelector;
  schema: JsonSchemaObject;
  uiSchema?: UiSchema;
  isInline?: IsInline;
}[];

interface PatternSchema {
  id: string;
  templates: PatternTemplatesSchema;
}

/**
 * UI for Json Schema (v7)
 */
interface UiSchema {
  [k: string]: any;
}

// ---------

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file: src/schemas/pattern-w-meta.schema.js,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Title or Name of the pattern.
 */
type Title = string;
type Description = string;

type Uses = ('inSlice' | 'inGrid' | 'inComponent')[];
/**
 * Set to false to show default placeholder thumbnail
 */
type HasIcon = boolean;
/**
 * Title for component do's and don'ts example
 */
type ExampleName = string;
/**
 * More details about the contrasting examples for this component.
 */
type ExampleDescription = string;
/**
 * Screenshot example of scenario
 */
type Image = string;
/**
 * Description of what they should or should not be doing. Will automatically be preceded by 'do' or 'don't'.
 */
type Caption = string;
/**
 * Boolean to denote if this example is a 'Do' or a 'Don't'.
 */
type DoOrDonT = boolean;
/**
 * Size at which to demo this component
 */
type DemoSize = 's' | 'm' | 'l' | 'full';

export interface PatternWithMeta {
  id: Id;
  /**
   * Relative path to a JSON file that stores meta data for pattern. Schema for that file is in "pattern-meta.schema.json".
   */
  metaFilePath: string;
  templates: KnapsackPatternTemplate[];
  meta?: PatternMeta;
  readme?: string;
  dir: string;
}

/**
 * Meta data that describes a pattern (component, layout, etc) that comes from the Basalt Crux Design System.
 */
export interface PatternMeta {
  title: Title;
  description?: Description;
  type?: KnapsackPatternType['id'];
  status?: KnapsackPatternStatus['id'];
  uses?: Uses;
  hasIcon?: HasIcon;
  /**
   * Visual representations of what to do, and not to do, with components.
   */
  // dosAndDonts?: {
  //   title?: ExampleName;
  //   description?: ExampleDescription;
  //   items?: {
  //     image: Image;
  //     caption?: Caption;
  //     do: DoOrDonT;
  //   };
  //   [k: string]: any;
  // }[];
  demoSize?: DemoSize;
  /**
   * Show all templates in a list on one page
   */
  showAllTemplates?: boolean;
}

/**
 * Examples collections of Pattern Types:
 * - Atoms, Molecules, Organisms
 * - Components, Layouts
 */
export interface KnapsackPatternType {
  id: string;
  title: string;
}

export interface KnapsackPatternStatus {
  id: string;
  title: string;
  color?: string;
}

export interface KnapsackPatternSettings {
  patternTypes: KnapsackPatternType[];
  patternStatuses: KnapsackPatternStatus[];
}

export type KnapsackPattern = {
  id: string;
  /**
   * Relative path to a JSON file that stores meta data for pattern. Schema for that file is in "pattern-meta.schema.json".
   */
  metaFilePath: string;
  templates: KnapsackPatternTemplate[];
  meta?: PatternMeta;
  readme?: string;
  dir: string;
};

export type KnapsackPatternTemplate = {
  name: string;
  path: string;
  absolutePath: string;
  /** contents of file */
  src: string;
  id: string;
  title: string;
  alias: string;
  docPath?: string;
  /**
   * Inlined `docPath`
   */
  doc?: string;
  selector?: CSSSelector;
  schema: JsonSchemaObject;
  uiSchema?: UiSchema;
  isInline?: IsInline;
  assetSets: KnapsackAssetSet[];
  demoDatas?: Record<string, any>[];
  demoUrls: string[];
};

export interface KnapsackPatternTemplateCode {
  html: string;
  data?: Record<string, any>;
  templateSrc: string;
  usage: string;
  language: string;
}

export const patternTemplatesSchema = {
  title: 'Pattern Templates Schema',
  description: 'Collections of template files and their schemas',
  type: 'array',
  minItems: 1,
  items: {
    type: 'object',
    additionalProperties: false,
    required: ['path', 'id', 'title'],
    properties: {
      alias: {
        title: 'Template Alias',
        type: 'string',
        description:
          'Instead of using the full path to the file, use this when passing to the template renderer',
      },
      path: {
        title: 'Template Path',
        type: 'string',
        description: 'Path to pattern template.',
      },
      id: {
        title: 'Template ID',
        type: 'string',
        description: 'Unique identifier',
      },
      title: {
        title: 'Template Title',
        type: 'string',
      },
      demoDatas: {
        title: 'Demo Data Sets',
        description: 'Sets of sample data to pass to template',
        type: 'array',
        items: {
          type: 'object',
        },
      },
      assetSets: {
        title: 'Asset Sets',
        description: 'Can override global ones with same id.',
        type: 'array',
        items: {
          type: 'object',
          required: ['id', 'title', 'assets'],
          properties: {
            id: {
              type: 'string',
            },
            title: {
              type: 'string',
            },
            assets: {
              type: 'array',
              items: {
                type: 'object',
                required: ['src'],
                properties: {
                  src: {
                    type: 'string',
                    description: 'Path or url to a CSS or JS file to load.',
                  },
                },
              },
            },
          },
        },
      },
      selector: {
        title: 'CSS Selector',
        type: 'string',
      },
      schema: {
        title: 'Schema',
        type: 'object',
        description: 'Json Schema (v7) describing pattern',
      },
      uiSchema: {
        title: 'uiSchema',
        type: 'object',
        description: 'UI for Json Schema (v7)',
      },
      isInline: {
        title: 'Is Inline',
        type: 'boolean',
        description: 'Denote if this form should be displayed inline',
      },
      docPath: {
        title: 'Documentation',
        type: 'string',
        description:
          'Relative path to markdown documentation specific to this template',
      },
    },
  },
};

export const patternSchema = {
  title: 'PatternSchema',
  type: 'object',
  required: ['id', 'templates'],
  additionalProperties: false,
  properties: {
    id: {
      title: 'Id',
      type: 'string',
      description:
        "Identifying machine friendly name of pattern. Usually the 'Block' in 'BEM'.",
    },
    templates: patternTemplatesSchema,
  },
};

export const patternMetaSchema = {
  $schema: 'http://json-schema.org/draft-07/schema',
  title: 'Pattern Meta Schema',
  type: 'object',
  description:
    'Meta data that describes a pattern (component, layout, etc) that comes from the Basalt Crux Design System.',
  additionalProperties: false,
  required: ['title'],
  properties: {
    title: {
      title: 'Title',
      type: 'string',
      description: 'Title or Name of the pattern.',
    },
    description: {
      title: 'Description',
      type: 'string',
      default: '',
    },
    type: {
      title: 'Type',
      type: 'string',
      description: 'Describes the type of pattern.',
    },
    status: {
      title: 'Status',
      type: 'string',
    },
    uses: {
      title: 'Uses',
      type: 'array',
      uniqueItems: true,
      default: [],
      items: {
        type: 'string',
        enum: ['inSlice', 'inGrid', 'inComponent'],
        enumNames: ['In Slice', 'In Grid', 'In Component'],
      },
    },
    hasIcon: {
      title: 'Has Icon',
      type: 'boolean',
      description: 'Set to false to show default placeholder thumbnail',
      default: true,
    },
    showAllTemplates: {
      title: 'Show All Templates',
      type: 'boolean',
      description: 'Can toggle in interface.',
      default: false,
    },
    // dosAndDonts: {
    //   type: 'array',
    //   description:
    //     'Visual representations of what to do, and not to do, with components.',
    //   items: {
    //     type: 'object',
    //     additionalItems: false,
    //     properties: {
    //       title: {
    //         title: 'Example Name',
    //         type: 'string',
    //         description: "Title for component do's and don'ts example",
    //       },
    //       description: {
    //         title: 'Example Description',
    //         type: 'string',
    //         description:
    //           'More details about the contrasting examples for this component.',
    //       },
    //       items: {
    //         type: 'object',
    //         additionalProperties: false,
    //         required: ['image', 'do'],
    //         properties: {
    //           image: {
    //             title: 'Image',
    //             type: 'string',
    //             description: 'Screenshot example of scenario',
    //           },
    //           caption: {
    //             title: 'Caption',
    //             type: 'string',
    //             description:
    //               "Description of what they should or should not be doing. Will automatically be preceded by 'do' or 'don't'.",
    //           },
    //           do: {
    //             title: "Do or Don't",
    //             type: 'boolean',
    //             description:
    //               "Boolean to denote if this example is a 'Do' or a 'Don't'.",
    //           },
    //         },
    //       },
    //     },
    //   },
    // },
    demoSize: {
      title: 'Demo Size',
      type: 'string',
      description: 'Size at which to demo this component',
      enum: ['s', 'm', 'l', 'full'],
      enumNames: ['Small', 'Medium', 'Large', 'full'],
      default: 'l',
    },
  },
};

export const patternWithMetaSchema = {
  ...patternSchema,
  title: 'PatternWithMetaSchema',
  properties: {
    ...patternSchema.properties,
    meta: patternMetaSchema,
  },
};

/**
 * @deprecated
 */
const patternNewSchema = {
  $schema: 'http://json-schema.org/draft-07/schema',
  title: 'Pattern New Schema',
  type: 'object',
  description: 'Info for creating a new Pattern',
  additionalProperties: false,
  required: ['id', 'title'],
  properties: {
    id: {
      title: 'Id',
      type: 'string',
      description: 'Unique identifier',
    },
    title: {
      title: 'Title',
      type: 'string',
      description: 'Title or Name of the pattern.',
    },
  },
};

export const patternsTypeDef = gql`
  scalar JSON

  type PatternDoAndDontItem {
    image: String!
    caption: String
    do: Boolean!
  }

  "Visual representations of what to do, and not to do, with components."
  type PatternDoAndDont {
    title: String
    description: String
    items: [PatternDoAndDontItem!]!
  }

  type PatternAsset {
    src: String!
    publicPath: String!
    sizeRaw: String
    sizeKb: String
  }

  type PatternAssetSet {
    id: ID!
    title: String!
    assets: [PatternAsset]
  }

  type PatternTemplate {
    "JSON Schema"
    schema: JSON
    "CSS Selector"
    selector: String
    id: ID!
    path: String!
    title: String!
    docPath: String
    doc: String
    demoDatas: [JSON]
    demoUrls: [String]
    uiSchema: JSON
    isInline: Boolean
    demoSize: String
    assetSets: [PatternAssetSet]
  }

  type PatternType {
    id: ID!
    title: String!
    patterns: [Pattern]
  }

  type PatternStatus {
    id: ID!
    title: String!
    color: String
  }

  type PatternSettings {
    patternStatuses: [PatternStatus]
    patternTypes: [PatternType]
  }

  enum PatternUses {
    inSlice
    inGrid
    inComponent
  }

  enum PatternDemoSize {
    s
    m
    l
    full
  }

  type PatternMeta {
    title: String!
    description: String
    type: ID
    status: String
    uses: [PatternUses]
    hasIcon: Boolean
    dosAndDonts: [PatternDoAndDont]
    demoSize: PatternDemoSize
    showAllTemplates: Boolean
  }

  type Pattern {
    id: ID!
    "Relative path to a JSON file that stores meta data for pattern. Schema for that file is in pattern-meta.schema.json."
    metaFilePath: String
    templates: [PatternTemplate]!
    meta: PatternMeta
  }

  type PatternRenderResponse {
    ok: Boolean!
    html: String
    message: String
  }

  type TemplateCode {
    usage: String
    data: JSON
    templateSrc: String
    html: String
    language: String
  }

  type Query {
    patterns: [Pattern]
    pattern(id: ID): Pattern
    templateCode(
      patternId: String
      templateId: String
      data: JSON
    ): TemplateCode
    patternTypes: [PatternType]
    patternType(id: ID): PatternType
    patternStatuses: [PatternStatus]
    patternSettings: PatternSettings
    render(
      patternId: ID
      templateId: ID
      wrapHtml: Boolean
      data: JSON
    ): PatternRenderResponse
  }

  type Mutation {
    setPatternMeta(id: ID, meta: JSON): JSON
    setPatternTypes(patternTypes: JSON): [PatternType]
    setPatternStatuses(patternStatuses: JSON): [PatternStatus]
    setPatternSettings(settings: JSON): PatternSettings
    setPatternTemplateReadme(id: ID, templateId: ID, readme: String): Pattern
  }
`;
